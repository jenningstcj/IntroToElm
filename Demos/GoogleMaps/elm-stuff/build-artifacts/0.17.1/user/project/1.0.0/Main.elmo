var _user$project$Main$kilometersToMiles = function (km) {
	return _elm_lang$core$Basics$round(km * 0.62137);
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$p,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Latitude: ',
							_elm_lang$core$Basics$toString(model.pos.lat)))
					])),
				A2(
				_elm_lang$html$Html$p,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Longitude: ',
							_elm_lang$core$Basics$toString(model.pos.lng)))
					])),
				A2(
				_elm_lang$html$Html$p,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Altitude: ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(model.alt),
								' miles')))
					])),
				A2(
				_elm_lang$html$Html$p,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Velocity: ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(model.vel),
								' miles per hour')))
					]))
			]));
};
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {pos: a, alt: b, vel: c};
	});
var _user$project$Main$init = function () {
	var knoxville = A2(_user$project$SharedModels$GMPos, 35.9335673, -84.016913);
	return {
		ctor: '_Tuple2',
		_0: A3(_user$project$Main$Model, knoxville, 0, 0),
		_1: _user$project$GMaps$moveMap(knoxville)
	};
}();
var _user$project$Main$ISS_JSON = F4(
	function (a, b, c, d) {
		return {latitude: a, longitude: b, altitude: c, velocity: d};
	});
var _user$project$Main$decodeISSPosition = A5(
	_elm_lang$core$Json_Decode$object4,
	_user$project$Main$ISS_JSON,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'latitude', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'longitude', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'altitude', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'velocity', _elm_lang$core$Json_Decode$float));
var _user$project$Main$FetchPosition = function (a) {
	return {ctor: 'FetchPosition', _0: a};
};
var _user$project$Main$FetchFail = function (a) {
	return {ctor: 'FetchFail', _0: a};
};
var _user$project$Main$FetchSucceed = function (a) {
	return {ctor: 'FetchSucceed', _0: a};
};
var _user$project$Main$getLocation = function () {
	var url = 'https://api.wheretheiss.at/v1/satellites/25544';
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$Main$FetchFail,
		_user$project$Main$FetchSucceed,
		A2(_evancz$elm_http$Http$get, _user$project$Main$decodeISSPosition, url));
}();
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'MapMoved':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pos: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchSucceed':
				var _p1 = _p0._0;
				var altitude = _user$project$Main$kilometersToMiles(_p1.altitude);
				var velocity = _user$project$Main$kilometersToMiles(_p1.velocity);
				var newPos = A2(_user$project$SharedModels$GMPos, _p1.latitude, _p1.longitude);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pos: newPos, vel: velocity, alt: altitude}),
					_1: _user$project$GMaps$moveMap(newPos)
				};
			case 'FetchFail':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Main$getLocation};
		}
	});
var _user$project$Main$MapMoved = function (a) {
	return {ctor: 'MapMoved', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$GMaps$mapMoved(_user$project$Main$MapMoved),
				A2(_elm_lang$core$Time$every, 5 * _elm_lang$core$Time$second, _user$project$Main$FetchPosition)
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
